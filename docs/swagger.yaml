basePath: /
definitions:
  structs.MailRecipient:
    properties:
      id:
        example: 1234546456
        type: integer
      type:
        enum:
        - character
        - corporation
        - alliance
        - mailing_list
        example: character
        type: string
    type: object
  structs.Route:
    properties:
      allowedCorps:
        items:
          type: integer
        type: array
      from:
        type: string
      id:
        type: string
      noCollateral:
        type: boolean
      pricePerM3:
        type: number
      to:
        type: string
      visibility:
        description: '"all" | "whitelist"'
        type: string
    type: object
  structs.SendMailRequest:
    properties:
      autoApproveCspa:
        example: false
        type: boolean
      body:
        example: Hello World
        type: string
      recipients:
        items:
          $ref: '#/definitions/structs.MailRecipient'
        type: array
      subject:
        example: Test
        type: string
    type: object
  structs.UpdateRoleReq:
    properties:
      role:
        type: string
    type: object
  structs.User:
    description: Darstellung eines Users für die Admin-API.
    properties:
      char_id:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  structs.VerifyResponse:
    properties:
      CharacterID:
        example: 12345678
        type: integer
      CharacterName:
        example: Pilot McFly
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API für Speedliner
  title: Speedliner API
  version: "1.0"
paths:
  /app/callback:
    get:
      description: OAuth2 Callback für ESI, speichert Token und setzt Cookie
      parameters:
      - description: Authorization Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - text/html
      responses:
        "302":
          description: Redirect to home
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: ESI Callback
      tags:
      - Auth
  /app/login:
    get:
      description: Leitet zum ESI-Login um
      produces:
      - text/html
      responses:
        "302":
          description: Redirect
          schema:
            type: string
      summary: Login redirect
      tags:
      - Auth
  /app/logout:
    get:
      description: Löscht den Auth-Cookie und entfernt das Token aus dem Speicher
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Logout
      tags:
      - Auth
  /app/mail:
    post:
      consumes:
      - application/json
      description: Sendet eine EVE-Mail über ESI (/characters/{character_id}/mail/).
        Es wird **keine** CSPA-Berechnung durchgeführt; `approved_cost` wird als 0
        gesendet.
      parameters:
      - description: Mail-Daten
        in: body
        name: mail
        required: true
        schema:
          $ref: '#/definitions/structs.SendMailRequest'
      produces:
      - application/json
      responses:
        "201":
          description: mail_id
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid JSON / Validation error
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "502":
          description: ESI error
          schema:
            type: string
      summary: EVE-Mail senden (ohne CSPA)
      tags:
      - Mail
  /app/me:
    get:
      description: Gibt Charakter-ID und Name zurück (aus Cookie)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.VerifyResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User Info
      tags:
      - Auth
  /app/ping:
    get:
      description: Gibt "pong" zurück
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Healthcheck
      tags:
      - System
  /app/role:
    get:
      description: Gibt die Rolle des eingeloggten Benutzers zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: DB error
          schema:
            type: string
      summary: Benutzerrolle abrufen
      tags:
      - Auth
  /app/routes:
    get:
      description: Gibt alle verfügbaren Transport-Routen zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Route'
            type: array
      summary: Get all active routes
      tags:
      - Routes
    post:
      consumes:
      - application/json
      description: Erstellt eine neue Transport-Route
      parameters:
      - description: Neue Route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/structs.Route'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/structs.Route'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: DB Insert error
          schema:
            type: string
      summary: Neue Route anlegen
      tags:
      - Routes
  /app/routes/{id}:
    delete:
      description: Löscht eine Transport-Route anhand der ID
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Deleted
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: DB Delete error
          schema:
            type: string
      summary: Route löschen
      tags:
      - Routes
    put:
      consumes:
      - application/json
      description: Aktualisiert eine bestehende Transport-Route anhand der ID
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      - description: Route-Daten
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/structs.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Route'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: DB Update error
          schema:
            type: string
      summary: Route aktualisieren
      tags:
      - Routes
  /app/users:
    get:
      description: Gibt eine Liste aller Benutzer mit deren Rollen zurück (nur Admin).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: DB error
          schema:
            type: string
      summary: Alle Benutzer abrufen
      tags:
      - Admin
  /app/users/{charID}/role:
    put:
      consumes:
      - application/json
      description: Setzt die Rolle eines Benutzers anhand der charID (nur Admin).
      parameters:
      - description: Character ID
        in: path
        name: charID
        required: true
        type: string
      - description: Neue Rolle
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/structs.UpdateRoleReq'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Invalid JSON or role
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: DB error
          schema:
            type: string
      summary: Rolle eines Benutzers ändern
      tags:
      - Admin
schemes:
- http
swagger: "2.0"
