basePath: /
definitions:
  structs.Route:
    properties:
      collateralFeePercent:
        type: number
      from:
        type: string
      id:
        type: string
      pricePerM3:
        type: integer
      to:
        type: string
      volumeMax:
        type: integer
    type: object
  structs.VerifyResponse:
    properties:
      CharacterID:
        example: 12345678
        type: integer
      CharacterName:
        example: Pilot McFly
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API für Speedliner
  title: Speedliner API
  version: "1.0"
paths:
  /app/callback:
    get:
      description: OAuth2 Callback für ESI, speichert Token und setzt Cookie
      parameters:
      - description: Authorization Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - text/html
      responses:
        "302":
          description: Redirect to home
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: ESI Callback
      tags:
      - Auth
  /app/login:
    get:
      description: Leitet zum ESI-Login um
      produces:
      - text/html
      responses:
        "302":
          description: Redirect
          schema:
            type: string
      summary: Login redirect
      tags:
      - Auth
  /app/logout:
    get:
      description: Löscht den Auth-Cookie und entfernt das Token aus dem Speicher
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Logout
      tags:
      - Auth
  /app/me:
    get:
      description: Gibt Charakter-ID und Name zurück (aus Cookie)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.VerifyResponse'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User Info
      tags:
      - Auth
  /app/ping:
    get:
      description: Gibt "pong" zurück
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Healthcheck
      tags:
      - System
  /app/routes:
    get:
      description: Gibt alle verfügbaren Transport-Routen zurück
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Route'
            type: array
      summary: Get all active routes
      tags:
      - Routes
    post:
      consumes:
      - application/json
      description: Erstellt eine neue Transport-Route
      parameters:
      - description: Neue Route
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/structs.Route'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/structs.Route'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "500":
          description: DB Insert error
          schema:
            type: string
      summary: Neue Route anlegen
      tags:
      - Routes
  /app/routes/{id}:
    delete:
      description: Löscht eine Transport-Route anhand der ID
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Deleted
          schema:
            type: string
        "500":
          description: DB Delete error
          schema:
            type: string
      summary: Route löschen
      tags:
      - Routes
    put:
      consumes:
      - application/json
      description: Aktualisiert eine bestehende Transport-Route anhand der ID
      parameters:
      - description: Route ID
        in: path
        name: id
        required: true
        type: string
      - description: Route-Daten
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/structs.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Route'
        "400":
          description: Invalid JSON
          schema:
            type: string
        "500":
          description: DB Update error
          schema:
            type: string
      summary: Route aktualisieren
      tags:
      - Routes
schemes:
- http
swagger: "2.0"
